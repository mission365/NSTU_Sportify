# Generated by Django 5.1.3 on 2024-12-01 19:07

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('department_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('event_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('player_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('age', models.IntegerField()),
                ('position', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_representative', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sports.department')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Matchdetails',
            fields=[
                ('match_id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('location', models.CharField(max_length=200)),
                ('sport', models.CharField(choices=[('football', 'Football'), ('cricket', 'Cricket'), ('chess', 'Chess'), ('handball', 'Handball'), ('carom', 'Carom')], default='football', max_length=50)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.event')),
            ],
        ),
        migrations.CreateModel(
            name='Handball',
            fields=[
                ('handball_match_id', models.AutoField(primary_key=True, serialize=False)),
                ('duration', models.IntegerField()),
                ('goals_team1', models.IntegerField()),
                ('goals_team2', models.IntegerField()),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.matchdetails')),
            ],
        ),
        migrations.CreateModel(
            name='Football',
            fields=[
                ('football_match_id', models.AutoField(primary_key=True, serialize=False)),
                ('duration', models.IntegerField()),
                ('goals_team1', models.IntegerField()),
                ('goals_team2', models.IntegerField()),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.matchdetails')),
            ],
        ),
        migrations.CreateModel(
            name='Cricket',
            fields=[
                ('cricket_match_id', models.AutoField(primary_key=True, serialize=False)),
                ('overs', models.IntegerField()),
                ('runs_team1', models.IntegerField()),
                ('runs_team2', models.IntegerField()),
                ('wickets_team1', models.IntegerField()),
                ('wickets_team2', models.IntegerField()),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.matchdetails')),
            ],
        ),
        migrations.CreateModel(
            name='Chess',
            fields=[
                ('chess_match_id', models.AutoField(primary_key=True, serialize=False)),
                ('duration', models.IntegerField()),
                ('moves', models.IntegerField()),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.matchdetails')),
            ],
        ),
        migrations.CreateModel(
            name='Carom',
            fields=[
                ('carom_match_id', models.AutoField(primary_key=True, serialize=False)),
                ('rounds', models.IntegerField()),
                ('points_team1', models.IntegerField()),
                ('points_team2', models.IntegerField()),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.matchdetails')),
            ],
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('notice_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('posted_date', models.DateField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.event')),
            ],
        ),
        migrations.CreateModel(
            name='Representative',
            fields=[
                ('representative_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.department')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('coach', models.CharField(max_length=100)),
                ('sport', models.CharField(choices=[('football', 'Football'), ('cricket', 'Cricket'), ('chess', 'Chess'), ('handball', 'Handball'), ('carom', 'Carom')], max_length=50)),
                ('players', models.ManyToManyField(blank=True, related_name='teams', to='sports.player')),
                ('representative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.representative')),
            ],
        ),
        migrations.CreateModel(
            name='Standing',
            fields=[
                ('standing_id', models.AutoField(primary_key=True, serialize=False)),
                ('position', models.IntegerField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.event')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.team')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('result_id', models.AutoField(primary_key=True, serialize=False)),
                ('draw', models.BooleanField(default=False)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.matchdetails')),
                ('loser_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loser_team', to='sports.team')),
                ('winner_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='winner_team', to='sports.team')),
            ],
        ),
        migrations.AddField(
            model_name='matchdetails',
            name='team1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team1_matches', to='sports.team'),
        ),
        migrations.AddField(
            model_name='matchdetails',
            name='team2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2_matches', to='sports.team'),
        ),
        migrations.CreateModel(
            name='Livescore',
            fields=[
                ('score_id', models.AutoField(primary_key=True, serialize=False)),
                ('score', models.IntegerField()),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.matchdetails')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sports.team')),
            ],
        ),
    ]
